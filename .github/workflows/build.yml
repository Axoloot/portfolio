name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Commit SHA
        id: commit_sha
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"

      - name: Pull current latest image
        run: |
          docker pull docker.io/axoloot/portfolio:latest || true

      - name: Tag old latest with commit SHA
        if: success() && steps.commit_sha.outputs.sha != ''
        run: |
          docker tag docker.io/axoloot/portfolio:latest docker.io/axoloot/portfolio:${{ steps.commit_sha.outputs.sha }}

      - name: Push old latest with commit SHA
        if: success() && steps.commit_sha.outputs.sha != ''
        run: |
          docker push docker.io/axoloot/portfolio:${{ steps.commit_sha.outputs.sha }}

      - name: Build and Tag New Docker Image as Latest
        run: |
          docker build -t docker.io/axoloot/portfolio:latest .

      - name: Push New Docker Image
        run: |
          docker push docker.io/axoloot/portfolio:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v2
      - name: Deploy to EC2
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME: ${{ secrets.SSH_HOST }}
            USER_NAME: ${{ secrets.USER_NAME }}

        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
            docker pull docker.io/axoloot/portfolio:latest &&
            docker run -d --name portfolio_test docker.io/axoloot/portfolio:latest &&
            sleep 30 && # Adjust as necessary for your container to start
            if docker exec portfolio_test curl -f http://localhost:80; then
              docker stop portfolio || true &&
              docker rm portfolio || true &&
              docker rm portfolio_test || true &&
              docker run -d -v /home/ubuntu/certs/:/tmp/certs -p 80:80 -p 443:443 --name portfolio docker.io/axoloot/portfolio:latest
            else
              docker stop portfolio_test || true &&
              docker rm portfolio_test || true &&
              echo "New container failed health check. Keeping the old container running."
              exit 1
            fi
          '
